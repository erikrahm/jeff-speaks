{"ast":null,"code":"import { createContext } from \"react\";\nimport categories from \"./output/categories.json\";\nimport characters from \"./output/characters.json\";\nimport conditions from \"./output/conditions.json\";\nimport dialogue from \"./output/dialogue.json\";\nimport responses from \"./output/responses.json\";\nexport const defaultState = {\n  categories,\n  characters,\n  conditions,\n  dialogue,\n  responses\n};\nexport const appReducer = (state, {\n  type,\n  payload\n}) => {\n  switch (type) {\n    case \"addCategory\":\n      return { ...state,\n        categories: [...state.categories, payload]\n      };\n\n    case \"decrement\":\n      return { ...state\n      };\n\n    default:\n      throw new Error(\"That ain't right, try using a valid action for the AppState reducer.\");\n  }\n};\nexport const AppContext = /*#__PURE__*/createContext({\n  state: defaultState,\n  dispatch: () => null\n});","map":{"version":3,"sources":["/Users/erik.rahm/dev/jeff-speaks/src/appState.tsx"],"names":["createContext","categories","characters","conditions","dialogue","responses","defaultState","appReducer","state","type","payload","Error","AppContext","dispatch"],"mappings":"AAAA,SAAgBA,aAAhB,QAA+C,OAA/C;AAEA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AAsBA,OAAO,MAAMC,YAAsB,GAAG;AACpCL,EAAAA,UADoC;AAEpCC,EAAAA,UAFoC;AAGpCC,EAAAA,UAHoC;AAIpCC,EAAAA,QAJoC;AAKpCC,EAAAA;AALoC,CAA/B;AAQP,OAAO,MAAME,UAAU,GAAG,CAACC,KAAD,EAAkB;AAAEC,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAAlB,KAAmD;AAC3E,UAAQD,IAAR;AACE,SAAK,aAAL;AACE,aAAO,EAAE,GAAGD,KAAL;AAAYP,QAAAA,UAAU,EAAE,CAAC,GAAGO,KAAK,CAACP,UAAV,EAAsBS,OAAtB;AAAxB,OAAP;;AACF,SAAK,WAAL;AACE,aAAO,EAAE,GAAGF;AAAL,OAAP;;AACF;AACE,YAAM,IAAIG,KAAJ,CACJ,sEADI,CAAN;AANJ;AAUD,CAXM;AAaP,OAAO,MAAMC,UAAU,gBAAGZ,aAAa,CAGpC;AAAEQ,EAAAA,KAAK,EAAEF,YAAT;AAAmCO,EAAAA,QAAQ,EAAE,MAAM;AAAnD,CAHoC,CAAhC","sourcesContent":["import React, { createContext, Dispatch } from \"react\";\n\nimport categories from \"./output/categories.json\";\nimport characters from \"./output/characters.json\";\nimport conditions from \"./output/conditions.json\";\nimport dialogue from \"./output/dialogue.json\";\nimport responses from \"./output/responses.json\";\n\nexport interface AppState {\n  categories: string[];\n  characters: Character[];\n  conditions: Condition[];\n  dialogue: Dialogue[];\n  responses: DialogueResponse[];\n}\n\nexport type Payload =\n  | string\n  | Character\n  | Condition\n  | Dialogue\n  | DialogueResponse;\n\nexport interface AppAction {\n  type: string;\n  payload: Payload;\n}\n\nexport const defaultState: AppState = {\n  categories,\n  characters,\n  conditions,\n  dialogue,\n  responses,\n};\n\nexport const appReducer = (state: AppState, { type, payload }: AppAction) => {\n  switch (type) {\n    case \"addCategory\":\n      return { ...state, categories: [...state.categories, payload] };\n    case \"decrement\":\n      return { ...state };\n    default:\n      throw new Error(\n        \"That ain't right, try using a valid action for the AppState reducer.\"\n      );\n  }\n};\n\nexport const AppContext = createContext<{\n  state: AppState;\n  dispatch: Dispatch<AppAction>;\n}>({ state: defaultState as AppState, dispatch: () => null });\n"]},"metadata":{},"sourceType":"module"}