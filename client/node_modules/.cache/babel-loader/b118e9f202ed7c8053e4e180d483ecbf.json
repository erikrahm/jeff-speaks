{"ast":null,"code":"import { createContext, useReducer } from \"react\";\nimport categories from \"./output/categories.json\";\nimport characters from \"./output/characters.json\";\nimport conditions from \"./output/conditions.json\";\nimport dialogue from \"./output/dialogue.json\";\nimport responses from \"./output/responses.json\";\nexport const defaultState = {\n  categories,\n  characters,\n  conditions,\n  dialogue,\n  responses\n};\n\nconst appReducer = (state, action) => {\n  switch (action.type) {\n    case \"increment\":\n      return {\n        count: state.count + 1\n      };\n\n    case \"decrement\":\n      return {\n        count: state.count - 1\n      };\n\n    default:\n      throw new Error();\n  }\n};\n\nconst [state, dispatch] = useReducer(reducer, initialState, init);\nexport const AppContext = /*#__PURE__*/createContext(defaultState);","map":{"version":3,"sources":["/Users/erik.rahm/dev/jeff-speaks/src/appState.tsx"],"names":["createContext","useReducer","categories","characters","conditions","dialogue","responses","defaultState","appReducer","state","action","type","count","Error","dispatch","reducer","initialState","init","AppContext"],"mappings":"AAAA,SAASA,aAAT,EAAwBC,UAAxB,QAA0C,OAA1C;AAEA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AAUA,OAAO,MAAMC,YAAsB,GAAG;AACpCL,EAAAA,UADoC;AAEpCC,EAAAA,UAFoC;AAGpCC,EAAAA,UAHoC;AAIpCC,EAAAA,QAJoC;AAKpCC,EAAAA;AALoC,CAA/B;;AAQP,MAAME,UAAU,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACpC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,WAAL;AACE,aAAO;AAAEC,QAAAA,KAAK,EAAEH,KAAK,CAACG,KAAN,GAAc;AAAvB,OAAP;;AACF,SAAK,WAAL;AACE,aAAO;AAAEA,QAAAA,KAAK,EAAEH,KAAK,CAACG,KAAN,GAAc;AAAvB,OAAP;;AACF;AACE,YAAM,IAAIC,KAAJ,EAAN;AANJ;AAQD,CATD;;AAWA,MAAM,CAACJ,KAAD,EAAQK,QAAR,IAAoBb,UAAU,CAACc,OAAD,EAAUC,YAAV,EAAwBC,IAAxB,CAApC;AAEA,OAAO,MAAMC,UAAU,gBAAGlB,aAAa,CAACO,YAAD,CAAhC","sourcesContent":["import { createContext, useReducer } from \"react\";\n\nimport categories from \"./output/categories.json\";\nimport characters from \"./output/characters.json\";\nimport conditions from \"./output/conditions.json\";\nimport dialogue from \"./output/dialogue.json\";\nimport responses from \"./output/responses.json\";\n\nexport interface AppState {\n  categories: string[];\n  characters: Character[];\n  conditions: Condition[];\n  dialogue: Dialogue[];\n  responses: Response[];\n}\n\nexport const defaultState: AppState = {\n  categories,\n  characters,\n  conditions,\n  dialogue,\n  responses,\n};\n\nconst appReducer = (state, action) => {\n  switch (action.type) {\n    case \"increment\":\n      return { count: state.count + 1 };\n    case \"decrement\":\n      return { count: state.count - 1 };\n    default:\n      throw new Error();\n  }\n};\n\nconst [state, dispatch] = useReducer(reducer, initialState, init);\n\nexport const AppContext = createContext(defaultState);\n"]},"metadata":{},"sourceType":"module"}