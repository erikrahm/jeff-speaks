{"ast":null,"code":"import { createContext } from \"react\";\nimport categories from \"./output/categories.json\";\nimport characters from \"./output/characters.json\";\nimport conditions from \"./output/conditions.json\";\nimport dialogue from \"./output/dialogue.json\";\nimport responses from \"./output/responses.json\";\nexport const defaultState = {\n  categories,\n  characters,\n  conditions,\n  dialogue,\n  responses\n};\nexport const appReducer = (state, dispatch) => {\n  const updateState = update => ({ ...state,\n    ...update\n  });\n\n  switch (dispatch.type) {\n    case \"addCategory\":\n      return updateState({\n        categories: [...state.categories, dispatch.payload]\n      });\n\n    case \"removeCategory\":\n      return updateState({\n        categories: [...state.categories].filter(item => item !== dispatch.payload)\n      });\n\n    case \"addCharacter\":\n      return updateState({\n        characters: [...state.categories, dispatch.payload]\n      });\n\n    case \"removeCharacter\":\n      return updateState({\n        characters: [...state.characters].filter(item => item.name !== dispatch.payload)\n      });\n\n    case \"addCondition\":\n      return updateState({\n        conditions: [...state.conditions, dispatch.payload]\n      });\n\n    case \"removeCondition\":\n      return updateState({\n        conditions: [...state.conditions].filter(item => item.name !== dispatch.payload)\n      });\n\n    case \"addDialogue\":\n      return updateState({\n        dialogue: [...state.dialogue, dispatch.payload]\n      });\n\n    case \"removeDialogue\":\n      return updateState({\n        dialogue: [...state.dialogue].filter(item => item.name !== dispatch.payload)\n      });\n\n    case \"addResponse\":\n      return updateState({\n        responses: [...state.responses, dispatch.payload]\n      });\n\n    case \"removeResponse\":\n      return updateState({\n        responses: [...state.responses].filter(item => item.name !== dispatch.payload)\n      });\n\n    default:\n      throw new Error(\"That ain't right, try using a valid action for the AppState reducer.\");\n  }\n};\nexport const AppContext = /*#__PURE__*/createContext({\n  state: defaultState,\n  dispatch: () => null\n});","map":{"version":3,"sources":["/Users/erik.rahm/dev/jeff-speaks/src/appState.tsx"],"names":["createContext","categories","characters","conditions","dialogue","responses","defaultState","appReducer","state","dispatch","updateState","update","type","payload","filter","item","name","Error","AppContext"],"mappings":"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","sourcesContent":["import { createContext, Dispatch } from \"react\";\n\nimport categories from \"./output/categories.json\";\nimport characters from \"./output/characters.json\";\nimport conditions from \"./output/conditions.json\";\nimport dialogue from \"./output/dialogue.json\";\nimport responses from \"./output/responses.json\";\n\nexport interface AppState {\n  categories: string[];\n  characters: Character[];\n  conditions: Condition[];\n  dialogue: Dialogue[];\n  responses: DialogueResponse[];\n}\n\nexport type Payload =\n  | string\n  | Character\n  | Condition\n  | Dialogue\n  | DialogueResponse;\n\nexport interface AppAction {\n  type: string;\n  payload: Payload;\n}\n\nexport const defaultState: AppState = {\n  categories,\n  characters,\n  conditions,\n  dialogue,\n  responses,\n};\n\nexport const appReducer = (state: AppState, dispatch: AppAction) => {\n  const updateState = (update: any) => ({ ...state, ...update });\n\n  switch (dispatch.type) {\n    case \"addCategory\":\n      return updateState({\n        categories: [...state.categories, dispatch.payload],\n      });\n    case \"removeCategory\":\n      return updateState({\n        categories: [...state.categories].filter(\n          (item) => item !== dispatch.payload\n        ),\n      });\n    case \"addCharacter\":\n      return updateState({\n        characters: [...state.categories, dispatch.payload],\n      });\n    case \"removeCharacter\":\n      return updateState({\n        characters: [...state.characters].filter(\n          (item) => item.name !== dispatch.payload\n        ),\n      });\n    case \"addCondition\":\n      return updateState({\n        conditions: [...state.conditions, dispatch.payload],\n      });\n    case \"removeCondition\":\n      return updateState({\n        conditions: [...state.conditions].filter(\n          (item) => item.name !== dispatch.payload\n        ),\n      });\n    case \"addDialogue\":\n      return updateState({\n        dialogue: [...state.dialogue, dispatch.payload],\n      });\n    case \"removeDialogue\":\n      return updateState({\n        dialogue: [...state.dialogue].filter(\n          (item) => item.name !== dispatch.payload\n        ),\n      });\n    case \"addResponse\":\n      return updateState({\n        responses: [...state.responses, dispatch.payload],\n      });\n    case \"removeResponse\":\n      return updateState({\n        responses: [...state.responses].filter(\n          (item) => item.name !== dispatch.payload\n        ),\n      });\n    default:\n      throw new Error(\n        \"That ain't right, try using a valid action for the AppState reducer.\"\n      );\n  }\n};\n\nexport const AppContext = createContext<{\n  state: AppState;\n  dispatch: Dispatch<AppAction>;\n}>({ state: defaultState as AppState, dispatch: () => null });\n"]},"metadata":{},"sourceType":"module"}