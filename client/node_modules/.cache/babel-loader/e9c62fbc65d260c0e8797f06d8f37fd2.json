{"ast":null,"code":"var _jsxFileName = \"/Users/erik.rahm/dev/jeff-speaks/src/components/CharacterBuilder.tsx\",\n    _s = $RefreshSig$();\n\nimport { pickBy, reduce } from \"lodash\";\nimport React, { useContext, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { AppContext } from \"../appState\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CharacterContainer = styled.div`\n  background: #f1f1f1;\n  padding: 10px 15px 20px;\n  border-radius: 8px;\n  display: flex;\n  flex-direction: column;\n`;\n_c = CharacterContainer;\nconst CharacterName = styled.h4`\n  margin: 5px 0 0 0;\n`;\nconst DialogueHeader = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  border-bottom: 1px solid darkgray;\n  margin-bottom: 10px;\n\n  div {\n    display: flex;\n    flex-direction: row;\n  }\n\n  pre {\n    color: darkgray;\n    border-right: 1px solid darkgray;\n    padding: 10px;\n    margin: 0;\n\n    &:last-of-type {\n      border: none;\n    }\n\n    &:first-of-type {\n      border-right: 1px solid darkgray;\n    }\n  }\n`;\nconst DialogueWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  border: 1px solid darkgray;\n  margin-top: 20px;\n`;\nconst ResponsesWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding: 5px 20px 0;\n`;\nconst ResponseContainer = styled.div`\n  margin-top: 10px;\n  border: 1px solid darkgray;\n\n  &:last-of-type {\n    margin-bottom: 20px;\n  }\n`;\nconst True = styled.span`\n  color: green;\n`;\nconst False = styled.span`\n  color: red;\n`;\nconst DialogueParagraph = styled.p`\n  padding: 10px;\n  margin: 0;\n`;\nconst DialogueID = styled.pre`\n  cursor: text;\n`;\nconst EditButton = styled.div`\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  padding: 0 10px;\n  text-transform: uppercase;\n  font-size: 10px;\n  letter-spacing: 1px;\n\n  &:hover {\n    color: #ffffff;\n    background: steelblue;\n  }\n`;\n\nconst CharacterBuilder = ({\n  character\n}) => {\n  _s();\n\n  const {\n    state,\n    dispatch\n  } = useContext(AppContext);\n  const [editing, updateEditing] = useState(\"\");\n\n  const getConditional = cID => state.conditions[cID] || {\n    name: \"NONE\",\n    met: true\n  };\n\n  const getResponses = dID => Object.values(pickBy(state.responses, res => res.parent === dID));\n\n  const getDialogue = () => {\n    const huh = reduce(state.dialogue, (results, dialogue, key) => {\n      if (dialogue.character === character.name) {\n        results = [...results, { ...dialogue,\n          responses: getResponses(dialogue.name).map(resp => ({ ...resp,\n            conditionMet: getConditional(resp.condition).met\n          }))\n        }];\n      }\n\n      return results;\n    }, []);\n    console.log(\"HUHHHHH: \", huh);\n    return huh;\n  };\n\n  const editSection = ID => updateEditing(ID);\n\n  const saveDialogue = (ID, payload) => {\n    updateEditing(\"\");\n  };\n\n  const addDialogue = () => {};\n\n  const addResponse = () => {};\n\n  return /*#__PURE__*/_jsxDEV(CharacterContainer, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 161,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CharacterBuilder, \"UMYwG55DCnbkaxhlFD/HYP67W3g=\");\n\n_c2 = CharacterBuilder;\n\nconst DialogueBuilder = ({\n  dialogue\n}) => {\n  console.log(\"hey\");\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"hey\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 229,\n    columnNumber: 5\n  }, this);\n};\n\n_c3 = DialogueBuilder;\n\nconst ResponseBuilder = ({\n  response\n}) => {\n  console.log(\"hey\");\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"hey\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 243,\n    columnNumber: 5\n  }, this);\n};\n\n_c4 = ResponseBuilder;\nexport default CharacterBuilder;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"CharacterContainer\");\n$RefreshReg$(_c2, \"CharacterBuilder\");\n$RefreshReg$(_c3, \"DialogueBuilder\");\n$RefreshReg$(_c4, \"ResponseBuilder\");","map":{"version":3,"sources":["/Users/erik.rahm/dev/jeff-speaks/src/components/CharacterBuilder.tsx"],"names":["pickBy","reduce","React","useContext","useState","styled","AppContext","CharacterContainer","div","CharacterName","h4","DialogueHeader","DialogueWrapper","ResponsesWrapper","ResponseContainer","True","span","False","DialogueParagraph","p","DialogueID","pre","EditButton","CharacterBuilder","character","state","dispatch","editing","updateEditing","getConditional","cID","conditions","name","met","getResponses","dID","Object","values","responses","res","parent","getDialogue","huh","dialogue","results","key","map","resp","conditionMet","condition","console","log","editSection","ID","saveDialogue","payload","addDialogue","addResponse","DialogueBuilder","ResponseBuilder","response"],"mappings":"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","sourcesContent":["import { pickBy, reduce } from \"lodash\";\nimport React, { useContext, useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport { AppContext } from \"../appState\";\n\nconst CharacterContainer = styled.div`\n  background: #f1f1f1;\n  padding: 10px 15px 20px;\n  border-radius: 8px;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst CharacterName = styled.h4`\n  margin: 5px 0 0 0;\n`;\n\nconst DialogueHeader = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  border-bottom: 1px solid darkgray;\n  margin-bottom: 10px;\n\n  div {\n    display: flex;\n    flex-direction: row;\n  }\n\n  pre {\n    color: darkgray;\n    border-right: 1px solid darkgray;\n    padding: 10px;\n    margin: 0;\n\n    &:last-of-type {\n      border: none;\n    }\n\n    &:first-of-type {\n      border-right: 1px solid darkgray;\n    }\n  }\n`;\n\nconst DialogueWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  border: 1px solid darkgray;\n  margin-top: 20px;\n`;\n\nconst ResponsesWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding: 5px 20px 0;\n`;\n\nconst ResponseContainer = styled.div`\n  margin-top: 10px;\n  border: 1px solid darkgray;\n\n  &:last-of-type {\n    margin-bottom: 20px;\n  }\n`;\n\nconst True = styled.span`\n  color: green;\n`;\n\nconst False = styled.span`\n  color: red;\n`;\n\nconst DialogueParagraph = styled.p`\n  padding: 10px;\n  margin: 0;\n`;\n\nconst DialogueID = styled.pre`\n  cursor: text;\n`;\n\nconst EditButton = styled.div`\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  padding: 0 10px;\n  text-transform: uppercase;\n  font-size: 10px;\n  letter-spacing: 1px;\n\n  &:hover {\n    color: #ffffff;\n    background: steelblue;\n  }\n`;\n\ninterface ResponseRender extends DialogueResponse {\n  conditionMet: boolean;\n}\n\ninterface DialogueRender extends Dialogue {\n  responses: ResponseRender[];\n}\n\ninterface CharacterProps {\n  character: Character;\n}\n\nconst CharacterBuilder: React.FC<CharacterProps> = ({ character }) => {\n  const { state, dispatch } = useContext(AppContext);\n  const [editing, updateEditing] = useState(\"\");\n\n  const getConditional = (cID: string) =>\n    state.conditions[cID] || {\n      name: \"NONE\",\n      met: true,\n    };\n\n  const getResponses = (dID: string): DialogueResponse[] =>\n    Object.values(pickBy(state.responses, (res) => res.parent === dID));\n\n  const getDialogue = () => {\n    const huh = reduce(\n      state.dialogue,\n      (results, dialogue, key) => {\n        if (dialogue.character === character.name) {\n          results = [\n            ...results,\n            {\n              ...dialogue,\n              responses: getResponses(dialogue.name).map((resp) => ({\n                ...resp,\n                conditionMet: getConditional(resp.condition).met,\n              })),\n            },\n          ];\n        }\n        return results;\n      },\n      [] as unknown as DialogueRender[]\n    );\n    console.log(\"HUHHHHH: \", huh);\n    return huh;\n  };\n\n  const editSection = (ID: string) => updateEditing(ID);\n\n  const saveDialogue = (ID: string, payload: Dialogue) => {\n    updateEditing(\"\");\n  };\n\n  const addDialogue = () => {};\n\n  const addResponse = () => {};\n\n  return (\n    <CharacterContainer>\n      {/* <CharacterName>{character.displayName}</CharacterName>\n      {getDialogue().map((dialogue) => (\n        <DialogueWrapper id={dialogue.name}>\n          {editing === dialogue.name ? (\n            <DialogueBuilder dialogue={dialogue} />\n          ) : (\n            <>\n              <DialogueHeader>\n                <DialogueID>{dialogue.name}</DialogueID>\n                <div>\n                  <pre>{dialogue.default && <True>DEFAULT</True>}</pre>\n                  <EditButton onClick={() => editSection(dialogue.name)}>\n                    Edit\n                  </EditButton>\n                </div>\n              </DialogueHeader>\n              <DialogueParagraph>\"{dialogue.dialogue}\"</DialogueParagraph>\n            </>\n          )}\n          <ResponsesWrapper>\n            {dialogue.responses.map((resp) => (\n              <ResponseContainer id={resp.name}>\n                {editing === dialogue.name ? (\n                  <ResponseBuilder response={resp} />\n                ) : (\n                  <>\n                    <DialogueHeader>\n                      <DialogueID>{resp.name}</DialogueID>\n                      <pre>\n                        <a href={`#${resp.next}`}>Next: {resp.next}</a>\n                      </pre>\n                      <div>\n                        <pre>\n                          Condition:{\" \"}\n                          {resp.conditionMet ? (\n                            <True>{resp.condition}</True>\n                          ) : (\n                            <False>{resp.condition}</False>\n                          )}\n                        </pre>\n                        <EditButton onClick={() => editSection(resp.name)}>\n                          Edit\n                        </EditButton>\n                      </div>\n                    </DialogueHeader>\n                    <DialogueParagraph>\n                      \"[{resp.category}] {resp.dialogue}\"\n                    </DialogueParagraph>\n                  </>\n                )}\n              </ResponseContainer>\n            ))}\n          </ResponsesWrapper>\n        </DialogueWrapper>\n      ))} */}\n    </CharacterContainer>\n  );\n};\n\ninterface DialogueBuilderProps {\n  dialogue: Dialogue;\n}\n\nconst DialogueBuilder: React.FC<DialogueBuilderProps> = ({ dialogue }) => {\n  console.log(\"hey\");\n\n  return (\n    <div>\n      <div>hey</div>\n    </div>\n  );\n};\n\ninterface ResponseBuilderProps {\n  response: DialogueResponse;\n}\n\nconst ResponseBuilder: React.FC<ResponseBuilderProps> = ({ response }) => {\n  console.log(\"hey\");\n\n  return (\n    <div>\n      <div>hey</div>\n    </div>\n  );\n};\n\nexport default CharacterBuilder;\n"]},"metadata":{},"sourceType":"module"}